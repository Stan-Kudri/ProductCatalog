@page "/company"

@using TestTask.Core.Models
@using TestTask.Core.Models.Companies
@using TestTask.Core.Models.Page
@inject CompanyService CompanyService

<PageTitle>Company</PageTitle>
<MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Company</MudText>
<MudTable Items="companies" Hover="true" SortLabel="Sort By" Elevation="0" @bind-SelectedItems="selectedItems" MultiSelection="true">
    <ToolBarContent>
        <MudSelect T="string?" Label="Select type sort" Clearable="true" Required="true" @bind-Value="@valueTypeSort">
            @foreach (string? typeSort in typeSortField.Items)
            {
                <MudSelectItem Value="@typeSort" />
            }
        </MudSelect>
        <MudSpacer />
        <MudSelect T="string?" Label="Select column" Clearable="true" Required="true" Disabled="@isNotDisableFilter" @bind-Value="@sortField.SortField">
            @foreach (string? column in sortField.Items)
            {
                <MudSelectItem Value="@column"/>
            }
        </MudSelect>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudTooltip Text="Use Filter" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Material.Filled.Done" Color="Color.Tertiary"/>
        </MudTooltip> 
        <MudTooltip Text="Remove Filter" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Material.Filled.Restore" Color="Color.Warning"/>
        </MudTooltip>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<TestTask.Core.Models.Companies.Company, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TestTask.Core.Models.Companies.Company, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TestTask.Core.Models.Companies.Company, object>(x=>x.Country)">Country</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TestTask.Core.Models.Companies.Company, object>(x=>x.DateCreation)">DateCreation</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Country">@context.Country</MudTd>
        <MudTd DataLabel="DataCreation">@context.DateCreation.ToString("d")</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 25}" />
    </PagerContent>
    <FooterContent>
        <MudTd colspan="4">Select All</MudTd>
    </FooterContent>
</MudTable>


    @code {

    private List<TestTask.Core.Models.Companies.Company>? companies;
    private HashSet<TestTask.Core.Models.Companies.Company> selectedItems = new HashSet<TestTask.Core.Models.Companies.Company>();

    private int totalItems;
    private string? searchString = null;
    private string valueTypeSort { get; set; } = TypeSortField.NoSorting;
    private bool isNotDisableFilter => valueTypeSort == TypeSortField.NoSorting ? true : false;

    private SortCompanies sortField = new SortCompanies();
    private TypeSortField typeSortField = new TypeSortField();

    private void OnSearch(string text)
    {
        searchString = text;
        //table?.ReloadServerData();
    }

    private void UseFilter()
    {
        typeSortField.SetSort(valueTypeSort);
        OnInitialized();
    }

    private void ClearFilter()
    {
        valueTypeSort = TypeSortField.NoSorting;
        typeSortField.SetSort(valueTypeSort);
    }

    protected override void OnInitialized()
    {
        IQueryable<TestTask.Core.Models.Companies.Company> queriable = CompanyService.GetQueryableAll();
        queriable = string.IsNullOrEmpty(searchString) ? queriable : queriable.Where(e => e.Name.Contains(searchString) || e.Country.Contains(searchString) || e.DateCreation.ToString().Contains(searchString));
        queriable = sortField.Apply(queriable, typeSortField.IsAscending);
        var page = new TestTask.Core.Models.Page.Page();
        var result = new PagedList<TestTask.Core.Models.Companies.Company>(queriable, page.Number, page.Size);
        companies = result.Items;
    }
}
