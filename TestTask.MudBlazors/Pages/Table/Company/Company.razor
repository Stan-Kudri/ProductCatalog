@page "/company"

@using TestTask.Core.Models.Companies
@inject CompanyService CompanyService

<PageTitle>Company</PageTitle>
<MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Company</MudText>

@if (companies == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable ServerData="@(new Func<TableState, Task<TableData<TestTask.Core.Models.Companies.Company>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table" Items="companies" SortLabel="Sort By" Elevation="0" @bind-SelectedItems="selectedItems" MultiSelection="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Periodic Elements</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="id_field" T="TestTask.Core.Models.Companies.Company">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="TestTask.Core.Models.Companies.Company">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="country_field" T="TestTask.Core.Models.Companies.Company">Country</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="datacreate_field" T="TestTask.Core.Models.Companies.Company">Data Creation</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Country">@context.Country</MudTd>
            <MudTd DataLabel="DataCreation">@context.DateCreation.ToString("d")</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 25}" />
        </PagerContent>
        <FooterContent>
            <MudTd colspan="4">Select All</MudTd>
        </FooterContent>
    </MudTable>
}


@code {

    private IEnumerable<TestTask.Core.Models.Companies.Company>? pagedData;
    private MudTable<TestTask.Core.Models.Companies.Company>? table;

    private int totalItems;
    private string searchString = null;

    private async Task<TableData<TestTask.Core.Models.Companies.Company>> ServerReload(TableState state)
    {
        IEnumerable<TestTask.Core.Models.Companies.Company> data = CompanyService.GetAll();
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
            {
                return true;
            }
            if (element.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            if ($"{element.Country} {element.DateCreation}".Contains(searchString))
            { 
                return true; 
            }

            return false;
        }).ToList();

        totalItems = data.Count();

        switch (state.SortLabel)
        {
            case "id_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "position_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Country);
                break;
            case "mass_field":
                data = data.OrderByDirection(state.SortDirection, o => o.DateCreation);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<TestTask.Core.Models.Companies.Company>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table?.ReloadServerData();
    }

    private HashSet<TestTask.Core.Models.Companies.Company> selectedItems = new HashSet<TestTask.Core.Models.Companies.Company>();
    private List<TestTask.Core.Models.Companies.Company>? companies;

    protected override void OnInitialized()
    {
        companies = CompanyService.GetAll();
    }
}
