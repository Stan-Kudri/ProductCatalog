// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductCatalog.Core.DBContext;

#nullable disable

namespace ProductCatalog.Migrations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("ProductCatalog.Core.Models.Categories.Category", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasColumnName("id");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("TEXT")
                    .HasColumnName("name");

                b.HasKey("Id");

                b.HasIndex("Name")
                    .IsUnique();

                b.ToTable("category", (string)null);
            });

            modelBuilder.Entity("ProductCatalog.Core.Models.Companies.Company", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasColumnName("id");

                b.Property<string>("Country")
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnType("TEXT")
                    .HasColumnName("country");

                b.Property<DateTime>("DateCreation")
                    .HasColumnType("TEXT")
                    .HasColumnName("dateCreation");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("TEXT")
                    .HasColumnName("name");

                b.HasKey("Id");

                b.HasIndex("Name")
                    .IsUnique();

                b.ToTable("company", (string)null);
            });

            modelBuilder.Entity("ProductCatalog.Core.Models.Products.Product", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasColumnName("id");

                b.Property<Guid>("CategoryId")
                    .HasColumnType("TEXT")
                    .HasColumnName("categoryId");

                b.Property<Guid>("CompanyId")
                    .HasColumnType("TEXT")
                    .HasColumnName("companyId");

                b.Property<string>("Destination")
                    .HasColumnType("TEXT")
                    .HasColumnName("destination");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("TEXT")
                    .HasColumnName("name");

                b.Property<double>("Price")
                    .HasColumnType("REAL")
                    .HasColumnName("price");

                b.Property<Guid>("TypeId")
                    .HasColumnType("TEXT")
                    .HasColumnName("typeId");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("CompanyId");

                b.HasIndex("Name")
                    .IsUnique();

                b.HasIndex("TypeId");

                b.ToTable("product", (string)null);
            });

            modelBuilder.Entity("ProductCatalog.Core.Models.Types.ProductType", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasColumnName("id");

                b.Property<Guid>("CategoryId")
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("TEXT")
                    .HasColumnName("name");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("Name")
                    .IsUnique();

                b.ToTable("type", (string)null);
            });

            modelBuilder.Entity("ProductCatalog.Core.Models.Users.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasColumnName("id");

                b.Property<string>("PasswordHash")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("TEXT")
                    .HasColumnName("passwordHash");

                b.Property<string>("UserRole")
                    .IsRequired()
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValue("Basic Role")
                    .HasColumnName("role");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("TEXT")
                    .HasColumnName("username");

                b.HasKey("Id");

                b.HasIndex("Username")
                    .IsUnique();

                b.ToTable("user", (string)null);
            });

            modelBuilder.Entity("ProductCatalog.Core.Models.Products.Product", b =>
            {
                b.HasOne("ProductCatalog.Core.Models.Categories.Category", "Category")
                    .WithMany("Products")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("ProductCatalog.Core.Models.Companies.Company", "Company")
                    .WithMany("Product")
                    .HasForeignKey("CompanyId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("ProductCatalog.Core.Models.Types.ProductType", "Type")
                    .WithMany("Products")
                    .HasForeignKey("TypeId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Category");

                b.Navigation("Company");

                b.Navigation("Type");
            });

            modelBuilder.Entity("ProductCatalog.Core.Models.Types.ProductType", b =>
            {
                b.HasOne("ProductCatalog.Core.Models.Categories.Category", "Category")
                    .WithMany("Types")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Category");
            });

            modelBuilder.Entity("ProductCatalog.Core.Models.Categories.Category", b =>
            {
                b.Navigation("Products");

                b.Navigation("Types");
            });

            modelBuilder.Entity("ProductCatalog.Core.Models.Companies.Company", b =>
            {
                b.Navigation("Product");
            });

            modelBuilder.Entity("ProductCatalog.Core.Models.Types.ProductType", b =>
            {
                b.Navigation("Products");
            });
#pragma warning restore 612, 618
        }
    }
}
